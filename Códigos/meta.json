{
	"bfs.cpp": {
		"nome": "Busca em largura (BFS)",
		"complexidade": "O(v + e)",
		"atalho": "bfs",
		"descrição": "Encontra as distâncias mínimas de um vértice a todos os outros em um grafo."
	},
	"dfs.cpp": {
		"nome": "Busca em profundidade (DFS)",
		"complexidade": "O(v + e)",
		"atalho": "dfs",
		"descrição": "Encontra os vértices adjacentes a um dado vértice."
	},
	"binary-search.cpp": {
		"nome": "Busca binária",
		"complexidade": "O(n * log(n))",
		"atalho": "bSearch",
		"descrição": "Encontra o índice de um elemento em um vetor."
	},
	"binary-exp.cpp": {
		"nome": "Exponenciação binária",
		"complexidade": "O(log(b))",
		"atalho": "binexp",
		"descrição": "Eleva um número a um determinado expoente de maneira eficiente."
	},
	"binary-modexp.cpp": {
		"nome": "Exponenciação binária modular",
		"complexidade": "O(log(b))",
		"atalho": "modexp",
		"descrição": "Eleva um número a um determinado expoente em módulo de maneira eficiente."
	},
	"gcd.cpp": {
		"nome": "Algoritmo de Euclides",
		"complexidade": "O(log(min(a, b)))",
		"atalho": "gcd",
		"descrição": "Calcula o MDC entre dois números."
	},
	"extended-euclides.cpp": {
		"nome": "Algoritmo de Euclides Estendido",
		"complexidade": "O(log(min(a, b)))",
		"atalho": "gcdExt",
		"descrição": "Calcula os coeficientes do Algoritmo de Euclides Estendido."
	},
	"mod-fib.cpp": {
		"nome": "Fibonacci Modular",
		"complexidade": "O(log(n))",
		"atalho": "modfib",
		"descrição": "Calcula o n-ésimo termo da sequência de Fibonacci."
	}
}